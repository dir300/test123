// State management
let cart = [];
let products = [];

// API configuration
const API_BASE_URL = 'http://localhost:3000/api';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    showLoading(true);
    
    // –≠–º—É–ª—è—Ü–∏—è Telegram Web App –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (!window.Telegram) {
        window.Telegram = {
            WebApp: {
                initData: 'test',
                initDataUnsafe: {
                    user: {
                        id: 123456789,
                        first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                        last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        username: 'test_user'
                    }
                },
                expand: () => console.log('App expanded'),
                enableClosingConfirmation: () => console.log('Closing confirmation enabled'),
                showPopup: (params, callback) => {
                    if (confirm(params.message)) {
                        callback?.('confirm');
                    } else {
                        callback?.('cancel');
                    }
                },
                HapticFeedback: {
                    impactOccurred: (style) => console.log('Haptic:', style)
                }
            }
        };
    }

    const tg = window.Telegram.WebApp;
    updateUserInfo(tg.initDataUnsafe.user);
    
    try {
        products = await loadProducts();
        renderProducts();
        updateCartUI();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã');
    } finally {
        showLoading(false);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function updateUserInfo(user) {
    const userInfo = document.getElementById('userInfo');
    if (user) {
        userInfo.innerHTML = `
            <div>üë§ ${user.first_name} ${user.last_name || ''}</div>
            <div style="font-size: 12px;">@${user.username || '–±–µ–∑ username'}</div>
        `;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadProducts() {
    try {
        const response = await fetch(`${API_BASE_URL}/products`);
        if (!response.ok) throw new Error('Network error');
        return await response.json();
    } catch (error) {
        console.warn('Server not available, using mock data');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return [
            {
                id: 1,
                name: "iPhone 15 Pro",
                price: 99990,
                description: "–ù–æ–≤—ã–π iPhone —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∫–∞–º–µ—Ä–æ–π",
                image: "üì±",
                category: "phones"
            },
            {
                id: 2,
                name: "MacBook Air M2",
                price: 129990,
                description: "–ú–æ—â–Ω—ã–π –∏ –ª–µ–≥–∫–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞",
                image: "üíª",
                category: "laptops"
            },
            {
                id: 3,
                name: "AirPods Pro",
                price: 24990,
                description: "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º",
                image: "üéß",
                category: "audio"
            },
            {
                id: 4,
                name: "Apple Watch Series 9",
                price: 39990,
                description: "–£–º–Ω—ã–µ —á–∞—Å—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏",
                image: "‚åö",
                category: "wearables"
            },
            {
                id: 5,
                name: "iPad Air",
                price: 59990,
                description: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π",
                image: "üì±",
                category: "tablets"
            },
            {
                id: 6,
                name: "Magic Keyboard",
                price: 12990,
                description: "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π",
                image: "‚å®Ô∏è",
                category: "accessories"
            }
        ];
    }
}

// –†–µ–Ω–¥–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤
function renderProducts() {
    const container = document.getElementById('productsContainer');
    container.innerHTML = '';

    products.forEach(product => {
        const productElement = document.createElement('div');
        productElement.className = 'product-card';
        productElement.onclick = () => openProductModal(product);
        
        productElement.innerHTML = `
            <div class="product-image">${product.image}</div>
            <div class="product-title">${product.name}</div>
            <div class="product-price">${formatPrice(product.price)}</div>
        `;
        
        container.appendChild(productElement);
    });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç–æ–≤–∞—Ä–∞
function openProductModal(product) {
    const modal = document.getElementById('productModal');
    const title = document.getElementById('modalProductTitle');
    const content = document.getElementById('modalProductContent');

    const cartItem = cart.find(item => item.product.id === product.id);
    const quantity = cartItem ? cartItem.quantity : 0;

    title.textContent = product.name;
    content.innerHTML = `
        <div style="text-align: center; margin-bottom: 20px;">
            <div style="font-size: 48px; margin-bottom: 16px;">${product.image}</div>
            <div style="font-size: 24px; font-weight: 600; color: var(--link-color); margin-bottom: 12px;">
                ${formatPrice(product.price)}
            </div>
        </div>
        <p style="margin-bottom: 20px; color: var(--text-color);">${product.description}</p>
        
        <div class="quantity-controls">
            <button class="quantity-btn" onclick="changeQuantity(${product.id}, -1)">-</button>
            <span class="quantity-display">${quantity}</span>
            <button class="quantity-btn" onclick="changeQuantity(${product.id}, 1)">+</button>
        </div>
        
        <button class="btn ${quantity > 0 ? 'btn-success' : ''}" onclick="addToCart(${product.id})">
            ${quantity > 0 ? '‚úÖ –í –∫–æ—Ä–∑–∏–Ω–µ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'}
        </button>
    `;

    modal.style.display = 'flex';
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
function changeQuantity(productId, delta) {
    const product = products.find(p => p.id === productId);
    if (!product) return;

    const existingItem = cart.find(item => item.product.id === productId);
    
    if (existingItem) {
        existingItem.quantity += delta;
        if (existingItem.quantity <= 0) {
            cart = cart.filter(item => item.product.id !== productId);
        }
    } else if (delta > 0) {
        cart.push({
            product: product,
            quantity: 1
        });
    }
    
    updateCartUI();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
    const modal = document.getElementById('productModal');
    if (modal.style.display === 'flex') {
        openProductModal(product);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
function addToCart(productId) {
    changeQuantity(productId, 1);
    showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
function removeFromCart(productId) {
    cart = cart.filter(item => item.product.id !== productId);
    updateCartUI();
    showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–æ—Ä–∑–∏–Ω—ã
function updateCartUI() {
    const totalPrice = cart.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);
    const totalCount = cart.reduce((sum, item) => sum + item.quantity, 0);

    document.getElementById('totalPrice').textContent = formatPrice(totalPrice);
    document.getElementById('cartCount').textContent = totalCount;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ—Ä–∑–∏–Ω—ã
    const cartContent = document.getElementById('cartContent');
    if (cart.length === 0) {
        cartContent.innerHTML = '<p style="text-align: center; color: var(--hint-color);">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>';
    } else {
        cartContent.innerHTML = cart.map(item => `
            <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px 0; border-bottom: 1px solid var(--secondary-bg-color);">
                <div style="flex: 1;">
                    <div style="font-weight: 500;">${item.product.name}</div>
                    <div style="color: var(--link-color); font-size: 14px;">
                        ${formatPrice(item.product.price)} √ó ${item.quantity}
                    </div>
                </div>
                <div style="font-weight: 600; margin: 0 12px;">
                    ${formatPrice(item.product.price * item.quantity)}
                </div>
                <button onclick="removeFromCart(${item.product.id})" style="background: none; border: none; color: var(--hint-color); font-size: 20px; cursor: pointer; padding: 4px;">√ó</button>
            </div>
        `).join('');
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
function openCart() {
    if (cart.length === 0) {
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        return;
    }
    document.getElementById('cartModal').style.display = 'flex';
}

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function proceedToCheckout() {
    if (cart.length === 0) return;

    const orderData = {
        products: cart,
        total: cart.reduce((sum, item) => sum + (item.product.price * item.quantity), 0),
        user: window.Telegram.WebApp.initDataUnsafe.user,
        timestamp: new Date().toISOString()
    };

    const tg = window.Telegram.WebApp;
    
    tg.showPopup({
        title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
        message: `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${formatPrice(orderData.total)}`,
        buttons: [
            {id: 'cancel', type: 'cancel', text: '–û—Ç–º–µ–Ω–∞'},
            {id: 'confirm', type: 'default', text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
        ]
    }, async (buttonId) => {
        if (buttonId === 'confirm') {
            await processOrder(orderData);
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
async function processOrder(orderData) {
    showLoading(true);
    
    try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch(`${API_BASE_URL}/orders`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(orderData)
        });

        let orderResult;
        
        if (response.ok) {
            orderResult = await response.json();
        } else {
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
            orderResult = {
                success: true,
                orderId: 'LOCAL-' + Date.now(),
                message: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ (—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)'
            };
        }

        showOrderSuccess(orderResult, orderData);
        cart = [];
        updateCartUI();
        closeModal();
        
    } catch (error) {
        console.error('Order error:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    } finally {
        showLoading(false);
    }
}

// –ü–æ–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
function showOrderSuccess(orderResult, orderData) {
    const modal = document.getElementById('orderModal');
    const content = document.getElementById('orderContent');
    
    content.innerHTML = `
        <div style="text-align: center; margin-bottom: 20px;">
            <div style="font-size: 48px; margin-bottom: 16px;">‚úÖ</div>
            <div style="font-size: 18px; font-weight: 600; margin-bottom: 12px;">
                –ó–∞–∫–∞–∑ #${orderResult.orderId}
            </div>
            <div style="color: var(--success-color); font-size: 24px; font-weight: 600; margin-bottom: 16px;">
                ${formatPrice(orderData.total)}
            </div>
            <p style="color: var(--text-color); margin-bottom: 8px;">
                ${orderResult.message}
            </p>
            <p style="color: var(--hint-color); font-size: 14px;">
                –¢–æ–≤–∞—Ä–æ–≤: ${orderData.products.reduce((sum, item) => sum + item.quantity, 0)} —à—Ç.
            </p>
        </div>
    `;
    
    modal.style.display = 'flex';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatPrice(price) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB'
    }).format(price);
}

function closeModal() {
    document.querySelectorAll('.modal').forEach(modal => {
        modal.style.display = 'none';
    });
}

function showLoading(show) {
    document.getElementById('loadingIndicator').classList.toggle('loading', show);
}

function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 2000);
}

function showError(message) {
    alert('–û—à–∏–±–∫–∞: ' + message);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', initApp);

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
document.querySelectorAll('.modal').forEach(modal => {
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal();
        }
    });
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        closeModal();
    }
});